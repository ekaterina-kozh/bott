#@title –ü–æ–ª–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–ª—è —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—è
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
from sqlcode import create_table, get_quiz_index, update_quiz_index, get_player_statistics, get_last_user_score
import json

quiz_data = []
with open('quizedata.json', encoding='utf-8') as file:
    quiz_data = json.load(file)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_BOT_TOKEN" –Ω–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
API_TOKEN = '6573032015:AAGP8DXlrj1Di8C3QIjTEXpWTM5Zt-L9ZiE'

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


def generate_options_keyboard(answer_options, right_answer):
    builder = InlineKeyboardBuilder()

    for option in answer_options:
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data="right_answer" if option == right_answer else "wrong_answer")
        )

    builder.adjust(1)
    return builder.as_markup()



@dp.callback_query(F.data == "right_answer")
async def right_answer(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

 # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(callback.from_user.id)
    correct_option = quiz_data[current_question_index]['correct_option']
    final_score = await get_last_user_score(callback.from_user.id)
    #SCORE_BY_CORRECT_ANSWER = 12

    final_score += 1
    await callback.message.answer(f"–í–µ—Ä–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: {quiz_data[current_question_index]['options'][correct_option]}")

    
    await callback.message.answer("–í–µ—Ä–Ω–æ!")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index, final_score)


    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        final_score = await get_last_user_score(callback.from_user.id)
        corrent_answers_count = int(final_score / 12)
        corrent_percent = corrent_answers_count / len(quiz_data)
        incorrent_percent = 1.0 - corrent_percent

        result_text = f"\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: *{final_score}*\n*{corrent_percent:.2%}* –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, " \
                      f"*{incorrent_percent:.2%}* –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
        
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!" + result_text,
                                      parse_mode="Markdown")


@dp.callback_query(F.data == "wrong_answer")
async def wrong_answer(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )


    current_question_index = await get_quiz_index(callback.from_user.id)
    correct_option = quiz_data[current_question_index]['correct_option']
    final_score = await get_last_user_score(callback.from_user.id)
    SCORE_BY_CORRECT_ANSWER = 12

    final_score += SCORE_BY_CORRECT_ANSWER

    await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz_data[current_question_index]['options'][correct_option]}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index, final_score)


    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        final_score = await get_last_user_score(callback.from_user.id)
        corrent_answers_count = int(final_score / 12)
        corrent_percent = corrent_answers_count / len(quiz_data)
        incorrent_percent = 1.0 - corrent_percent

        result_text = f"\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: *{final_score}*\n*{corrent_percent:.2%}* –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, " \
                      f"*{incorrent_percent:.2%}* –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"

        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!" + result_text,
                                      parse_mode="Markdown")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑! üëã", reply_markup=builder.as_markup(resize_keyboard=True))


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(F.text=="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):

    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

 #–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stat
@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@dp.message(Command("stat"))
async def send_statistics(message: types.Message):
    statistics = await get_player_statistics()
    stats_message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join([f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}" for user_id, score in statistics])
    await message.answer(stats_message)


async def get_question(message, user_id):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(user_id)
    correct_index = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)


async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    user_score = 0
    await update_quiz_index(user_id, current_question_index, user_score)
    await get_question(message, user_id)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await create_table()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())